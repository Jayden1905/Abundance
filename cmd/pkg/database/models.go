// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type RolesName string

const (
	RolesNameFreeUser     RolesName = "free_user"
	RolesNamePremiumUser  RolesName = "premium_user"
	RolesNameNutritionist RolesName = "nutritionist"
	RolesNameAdmin        RolesName = "admin"
)

func (e *RolesName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RolesName(s)
	case string:
		*e = RolesName(s)
	default:
		return fmt.Errorf("unsupported scan type for RolesName: %T", src)
	}
	return nil
}

type NullRolesName struct {
	RolesName RolesName
	Valid     bool // Valid is true if RolesName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRolesName) Scan(value interface{}) error {
	if value == nil {
		ns.RolesName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RolesName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRolesName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RolesName), nil
}

type SubscriptionsSubscriptionType string

const (
	SubscriptionsSubscriptionTypeActive    SubscriptionsSubscriptionType = "Active"
	SubscriptionsSubscriptionTypeInactive  SubscriptionsSubscriptionType = "Inactive"
	SubscriptionsSubscriptionTypePending   SubscriptionsSubscriptionType = "Pending"
	SubscriptionsSubscriptionTypeCancelled SubscriptionsSubscriptionType = "Cancelled"
)

func (e *SubscriptionsSubscriptionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionsSubscriptionType(s)
	case string:
		*e = SubscriptionsSubscriptionType(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionsSubscriptionType: %T", src)
	}
	return nil
}

type NullSubscriptionsSubscriptionType struct {
	SubscriptionsSubscriptionType SubscriptionsSubscriptionType
	Valid                         bool // Valid is true if SubscriptionsSubscriptionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionsSubscriptionType) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionsSubscriptionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionsSubscriptionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionsSubscriptionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionsSubscriptionType), nil
}

type Role struct {
	RoleID int8
	Name   RolesName
}

type Subscription struct {
	SubscriptionID   int8
	SubscriptionType SubscriptionsSubscriptionType
	StartDate        time.Time
	EndDate          time.Time
}

type User struct {
	UserID         int32
	RoleID         int8
	Username       string
	Email          string
	PasswordHash   string
	IsVerified     bool
	SubscriptionID int8
	CreatedAt      time.Time
	UpdatedAt      time.Time
}
